# -*- coding: utf-8 -*-
"""DATA ANALYSIS & VISUALIZATIONipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h6KIkfgA6sAV6zznhPZVIc-HyuYWYGrO

# * LOADING DATASET
# * CREATING SEPARATE DATASETS FOR CATEGORICAL AND NUMERICAL COLUMNS
# * CREATING FUNCTIONS FOR DESCRIBING CATEGORICAL AND NUMERICAL DATASETS
# * CHECKING FOR MISSING VALUES AND FILLING THE MISSING VALUES
# * VISUALIZING THE CATEGORICAL , NUMERICAL DATASETS
# * CREATING A FUNCTION FOR ANALYSING AND VISUALISING THE CATEGORICAL , NUMERICAL DATASETS

> Add blockquote

#  LOADING DATASET
"""

# LOADING THE DATASET INDIAN TRAFFIC VIOLATIONS
import numpy as np
import pandas as pd

df=pd.read_csv("Indian_Traffic_Violations.csv")
df.head()

"""# DATA ANALYSIS"""

df.info()

"""# CREATING SEPARATE DATASETS FOR CATEGORICAL AND NUMERICAL COLUMNS

"""

# CREATING A DATASET FOR NUMERICAL COLUMNS
num_df=df.select_dtypes(include=["int","float"])
num_df.head()

# CREATING A DATASET FOR CATEGORICAL COLUMNS
cat_df=df.select_dtypes(include="object")
cat_df.head()

# CATEGORICAL DESCRIPTION OF THE CATEGORICAL COLUMNS IN THE DATASET
for i in cat_df.columns:
 print("categorical description of column ",i)
 print("\n")
 def cat_desc(column):
  print("unique values of column = ",cat_df[column].unique())
  print("number of unique values =",cat_df[column].nunique())
  print("count of column = ",cat_df[column].count())
  print("mode of column = ",cat_df[column].mode())
  print("\n")
  print("\n")
 cat_desc(i)

# NUMERICAL DESCRIPTION FOR NUMERICAL COLUMNS IN DATASET

for i in num_df.columns:
  print("numerical description of column ",i)
  print("\n")
  def num_desc(column):
    print("Average value of the column =",num_df[column].mean())
    print("Median value of the column =",num_df[column].median())
    print("Maximum value of the column =",num_df[column].max())
    print("Minimum value of the column =",num_df[column].min())
    print("Sum of all values in the column =",num_df[column].sum())
    print("Variance of the column =",num_df[column].var())
    print("Standard deviation of the column =",num_df[column].std())
    print("\n")
    print("\n")
  num_desc(i)

"""# CHECKING FOR THE MISSING VALUES"""

num_df.isnull().sum()

cat_df.isnull().sum()

"""# FILLING THE MISSING VALUES IN THE CAT_DF WITH MODE"""

cat_df["Helmet_Worn"]=cat_df["Helmet_Worn"].fillna(cat_df["Helmet_Worn"].mode()[0])
cat_df["Seatbelt_Worn"]=cat_df["Seatbelt_Worn"].fillna(cat_df['Seatbelt_Worn'].mode()[0])
cat_df.isnull().sum()

"""# DATA VISUALIZATION"""

import matplotlib.pyplot as plt
import seaborn as sns

def num_visualize(col_name):
   plt.boxplot(num_df[col_name])
   plt.show()
for i in num_df.columns:
  print("visualizing the col ",i )
  num_visualize(i)

def cat_visualize(col_name):
     sns.countplot(cat_df,x=i)
     plt.show()
for i in cat_df.columns:
    print("visualizing the col ",i )
    cat_visualize(i)

"""# CREATING A FUNCTION FOR BOTH ANALYSING AND VISUALIZING A DATASET"""

def analyse_visualise(df):
 for i in df.columns:
  if i in cat_df:
    cat_desc(i)
    cat_visualize(i)
  else:
    num_desc(i)
    num_visualize(i)

analyse_visualise(df)

